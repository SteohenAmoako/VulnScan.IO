'use server';
// Scans a website URL for vulnerabilities using the VirusTotal API through GenAI.
//
// - scanWebsite - A function that handles the website scanning process.
// - ScanWebsiteInput - The input type for the scanWebsite function.
// - ScanWebsiteOutput - The return type for the scanWebsite function.

import {ai} from '@/ai/genkit';
import {z} from 'genkit';
import { getUrlAnalysis } from '@/services/virustotal';

const ScanWebsiteInputSchema = z.object({
  url: z.string().describe('The URL of the website to scan.'),
  sslInfo: z.object({
    grade: z.string().optional(),
    protocols: z.array(z.string()).optional(),
  }).optional().describe('SSL/TLS analysis from SSL Labs'),
});
export type ScanWebsiteInput = z.infer<typeof ScanWebsiteInputSchema>;

const ScanWebsiteOutputSchema = z.object({
  scanReport: z.string().describe('A report of the scan results, including identified vulnerabilities, risk levels, and potential impacts.'),
});
export type ScanWebsiteOutput = z.infer<typeof ScanWebsiteOutputSchema>;

export async function scanWebsite(input: ScanWebsiteInput): Promise<ScanWebsiteOutput> {
  return scanWebsiteFlow(input);
}

const getUrlReportTool = ai.defineTool(
    {
        name: 'getUrlReport',
        description: 'Retrieves a security analysis report for a given URL from VirusTotal.',
        inputSchema: z.object({ url: z.string() }),
        outputSchema: z.any(),
    },
    async ({ url }) => {
        return await getUrlAnalysis(url);
    }
);

const scanWebsitePrompt = ai.definePrompt({
  name: 'scanWebsitePrompt',
  input: {schema: ScanWebsiteInputSchema},
  output: {schema: ScanWebsiteOutputSchema},
  tools: [getUrlReportTool],
  system: `You are a security expert tasked with analyzing website vulnerability data. The user will provide a URL and optional SSL/TLS data. Your job is to first call the getUrlReport tool to fetch the raw JSON data for that URL from the VirusTotal API, and then interpret all available data to generate a comprehensive, human-readable report.

Based on the data, structure your report into the following sections. Provide a detailed, nicely formatted written output for each. If the data for a section is unavailable or indicates no issues, state that clearly.

**Overall Status:** Briefly summarize the findings from the 'attributes.stats' section of the VirusTotal report. Mention how many engines flagged the site as malicious, suspicious, or harmless.

**Detected Threats:** If any security vendors (e.g., in 'attributes.results' from VirusTotal) have flagged the URL, list them and the category of threat they identified (e.g., "malicious," "phishing").

**Authentication Mechanisms:** Based on the scan data, evaluate the strength of password storage (hashing algorithms used) and authentication processes (e.g., multi-factor authentication). Weak password storage or easily bypassable authentication could lead to unauthorized access. If the scan data does not provide this information, state that this aspect was not covered by the scan.

**Session Management:** From the report, analyze how user sessions are handled after login. Vulnerabilities in session management can enable session hijacking or fixation. If the scan data does not provide this information, state that this aspect was not covered by the scan.

**Transport Layer Security (TLS):** Use the provided SSL/TLS information to analyze the website's encryption. Report the grade given by the SSL Labs scan. List the secure protocols (like TLS 1.2, TLS 1.3) that are supported. If the grade is poor (B, C, F, etc.), explain that this could expose user credentials during transmission. If no SSL/TLS data is provided, state that this aspect was not analyzed.

**Brute-Force Protection:** Assess whether the login page has measures to prevent brute-force attacks, such as account lockout policies or CAPTCHAs. If the scan data does not provide this information, state that this aspect was not covered by the scan.

Provide a detailed report. If the VirusTotal report is empty or indicates no threats, your report should reflect that, stating that the scan found no obvious vulnerabilities.
`,
  prompt: `Please generate a security report for the following URL: {{{url}}}.
{{#if sslInfo}}
Here is the SSL/TLS analysis data:
Grade: {{sslInfo.grade}}
Protocols: {{#each sslInfo.protocols}}{{{this}}}{{#unless @last}}, {{/unless}}{{/each}}
{{/if}}
`,
});

const scanWebsiteFlow = ai.defineFlow(
  {
    name: 'scanWebsiteFlow',
    inputSchema: ScanWebsiteInputSchema,
    outputSchema: ScanWebsiteOutputSchema,
  },
  async input => {
    try {
        const {output} = await scanWebsitePrompt(input);
        if (!output) {
            throw new Error('No output was generated by the AI model.');
        }
        return output;
    } catch (e: any) {
        console.error("Error in scanWebsiteFlow:", e);
        throw new Error(`Flow failed: ${e.message}`);
    }
  }
);
