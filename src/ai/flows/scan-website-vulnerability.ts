
'use server';
// Scans a website URL for vulnerabilities using the VirusTotal API through GenAI.
//
// - scanWebsite - A function that handles the website scanning process.
// - ScanWebsiteInput - The input type for the scanWebsite function.
// - ScanWebsiteOutput - The return type for the scanWebsite function.

import {ai} from '@/ai/genkit';
import {z} from 'genkit';
import { getUrlAnalysis } from '@/services/virustotal';
import type { NvdOutput } from './get-nvd-vulnerabilities';

const CveSchema = z.object({
    id: z.string(),
    description: z.string(),
    score: z.number().optional(),
    severity: z.string().optional(),
    published: z.string(),
});

const NvdResultSchema = z.object({
  technology: z.string(),
  totalResults: z.number(),
  vulnerabilities: z.array(CveSchema).optional(),
  error: z.string().optional(),
});

const ScanWebsiteInputSchema = z.object({
  url: z.string().describe('The URL of the website to scan.'),
  sslInfo: z.object({
    grade: z.string().optional(),
    protocols: z.array(z.string()).optional(),
    error: z.string().optional(),
  }).optional().describe('SSL/TLS analysis from SSL Labs'),
  mozillaInfo: z.object({
    grade: z.string().optional(),
    score: z.number().optional(),
    error: z.string().optional(),
    description: z.string().optional(),
  }).optional().describe('HTTP security header analysis from Mozilla Observatory'),
  nvdResults: z.array(NvdResultSchema).optional().describe('A list of vulnerability search results from the National Vulnerability Database (NVD).'),
});
export type ScanWebsiteInput = z.infer<typeof ScanWebsiteInputSchema>;

const ScanWebsiteOutputSchema = z.object({
  scanReport: z.string().describe('A report of the scan results, including identified vulnerabilities, risk levels, and potential impacts.'),
});
export type ScanWebsiteOutput = z.infer<typeof ScanWebsiteOutputSchema>;

export async function scanWebsite(input: ScanWebsiteInput): Promise<ScanWebsiteOutput> {
  return scanWebsiteFlow(input);
}

const getUrlReportTool = ai.defineTool(
    {
        name: 'getUrlReport',
        description: 'Retrieves a security analysis report for a given URL from VirusTotal. This tool MUST be called to get the data needed to generate the report.',
        inputSchema: z.object({ url: z.string() }),
        outputSchema: z.any(),
    },
    async ({ url }) => {
        return await getUrlAnalysis(url);
    }
);

const scanWebsitePrompt = ai.definePrompt({
  name: 'scanWebsitePrompt',
  input: {schema: ScanWebsiteInputSchema},
  output: {schema: ScanWebsiteOutputSchema},
  tools: [getUrlReportTool],
  system: `You are a security expert tasked with analyzing website vulnerability data. The user will provide a URL and optional data from other scans. Your job is to call the getUrlReport tool to fetch the raw JSON data for that URL from the VirusTotal API, and then interpret all available data to generate a comprehensive, human-readable report.

Based on the data, structure your report into the following sections. **You MUST wrap each section title in double asterisks**, for example: **Overall Status:**. Provide a detailed, nicely formatted written output for each. If the data for a section is unavailable or indicates no issues, state that clearly. You **must** call the getUrlReport tool to get data before you generate the report. If the tool call returns an error, your report for that section must clearly state the error.

**Overall Status:** Briefly summarize the findings from the 'attributes.stats' section of the VirusTotal report. Mention how many engines flagged the site as malicious, suspicious, or harmless. If the VirusTotal scan failed, state: "The VirusTotal scan could not be completed." and explain why if an error message is available.

**Detected Threats:** If any security vendors (e.g., in 'attributes.results' from VirusTotal) have flagged the URL, list them and the category of threat they identified (e.g., "malicious," "phishing"). If the scan failed or returned no threats, state "No threats were detected by the VirusTotal scan."

**Transport Layer Security (TLS):** Use the provided SSL/TLS information from SSL Labs to analyze the website's encryption. Report the grade given by the scan. List the secure protocols (like TLS 1.2, TLS 1.3) that are supported. If the grade is poor (B, C, F, etc.), explain that this could expose user credentials during transmission. If there was an error in the SSL Labs scan, report that error. If no SSL/TLS data is provided, state that this aspect was not analyzed.

**HTTP Security Headers:** Use the provided Mozilla Observatory data. Report the grade, score, and the provided description for that grade. Explain what a good score means and what a poor grade could lead to (e.g., clickjacking or cross-site scripting). If there was an error in the Mozilla scan, report that error. If no Mozilla Observatory data is provided, state that this aspect was not analyzed.

**Known Vulnerabilities (NVD):** Analyze the provided list of vulnerabilities from the National Vulnerability Database. For each technology with findings, list the CVEs found. For each CVE, include its ID, severity, score, and a brief description. If no vulnerabilities were found for the scanned technologies, state that clearly. If no NVD data was provided, state that this aspect was not analyzed.

Provide a detailed report. If the VirusTotal report is empty or indicates no threats, your report should reflect that, stating that the scan found no obvious vulnerabilities.
`,
  prompt: `Please generate a security report for the following URL: {{{url}}}.
{{#if sslInfo}}
Here is the SSL/TLS analysis data:
Grade: {{sslInfo.grade}}
Protocols: {{#each sslInfo.protocols}}{{{this}}}{{#unless @last}}, {{/unless}}{{/each}}
{{#if sslInfo.error}}Error: {{sslInfo.error}}{{/if}}
{{/if}}
{{#if mozillaInfo}}
Here is the Mozilla Observatory analysis data:
Grade: {{mozillaInfo.grade}}
Score: {{mozillaInfo.score}}
Description: {{mozillaInfo.description}}
{{#if mozillaInfo.error}}Error: {{mozillaInfo.error}}{{/if}}
{{/if}}
{{#if nvdResults}}
Here is the NVD vulnerability data:
{{#each nvdResults}}
Technology: {{this.technology}}
{{#if this.vulnerabilities}}
Vulnerabilities:
{{#each this.vulnerabilities}}
- CVE: {{this.id}} (Severity: {{this.severity}}, Score: {{this.score}}) - {{this.description}}
{{/each}}
{{else}}
No high/critical vulnerabilities found.
{{/if}}
{{/each}}
{{/if}}
`,
});

const scanWebsiteFlow = ai.defineFlow(
  {
    name: 'scanWebsiteFlow',
    inputSchema: ScanWebsiteInputSchema,
    outputSchema: ScanWebsiteOutputSchema,
  },
  async input => {
    try {
        const {output} = await scanWebsitePrompt(input);
        if (!output) {
            throw new Error('No output was generated by the AI model.');
        }
        return output;
    } catch (e: any) {
        let vtError = "The VirusTotal scan could not be completed. The API may be unavailable or the key may be invalid.";
        const errorMessage = e.message || '';

        if (errorMessage.includes('UserNotActiveError') || errorMessage.includes('User is banned') || (e.cause as any)?.code?.includes('PERMISSION_DENIED')) {
             vtError = "The VirusTotal scan failed because the API key is invalid or has been disabled.";
        } else if (errorMessage.includes('INVALID_ARGUMENT')) {
            vtError = "The VirusTotal scan failed because the AI model could not process the tool request correctly. This may be due to an invalid URL or a temporary issue with the AI service.";
        } else if (errorMessage) {
            vtError = `The VirusTotal scan failed with an unexpected error: ${errorMessage}`;
        }
        
        const fallbackReport = `
**Overall Status:**
${vtError}

**Detected Threats:**
The VirusTotal scan could not be completed.

**Transport Layer Security (TLS):**
${input.sslInfo?.error ? `Scan failed: ${input.sslInfo.error}` : input.sslInfo?.grade ? `The scan returned a grade of **${input.sslInfo.grade}**. Supported protocols include: ${input.sslInfo.protocols?.join(', ') || 'N/A'}.` : 'This aspect was not analyzed.'}

**HTTP Security Headers:**
${input.mozillaInfo?.error ? `Scan failed: ${input.mozillaInfo.error}` : input.mozillaInfo?.grade ? `The scan returned a grade of **${input.mozillaInfo.grade}** with a score of **${input.mozillaInfo.score}**. ${input.mozillaInfo.description}` : 'This aspect was not analyzed.'}
`;
        return { scanReport: fallbackReport };
    }
  }
);
