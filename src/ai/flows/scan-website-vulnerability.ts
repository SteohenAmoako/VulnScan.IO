
'use server';
// Scans a website URL for vulnerabilities using the VirusTotal API through GenAI.
//
// - scanWebsite - A function that handles the website scanning process.
// - ScanWebsiteInput - The input type for the scanWebsite function.
// - ScanWebsiteOutput - The return type for the scanWebsite function.

import {ai} from '@/ai/genkit';
import {z} from 'genkit';
import { getUrlAnalysis } from '@/services/virustotal';

const ScanWebsiteInputSchema = z.object({
  url: z.string().describe('The URL of the website to scan.'),
  sslInfo: z.object({
    grade: z.string().optional(),
    protocols: z.array(z.string()).optional(),
    error: z.string().optional(),
  }).optional().describe('SSL/TLS analysis from SSL Labs'),
  mozillaInfo: z.object({
    grade: z.string().optional(),
    score: z.number().optional(),
    error: z.string().optional(),
  }).optional().describe('HTTP security header analysis from Mozilla Observatory'),
});
export type ScanWebsiteInput = z.infer<typeof ScanWebsiteInputSchema>;

const ScanWebsiteOutputSchema = z.object({
  scanReport: z.string().describe('A report of the scan results, including identified vulnerabilities, risk levels, and potential impacts.'),
});
export type ScanWebsiteOutput = z.infer<typeof ScanWebsiteOutputSchema>;

export async function scanWebsite(input: ScanWebsiteInput): Promise<ScanWebsiteOutput> {
  return scanWebsiteFlow(input);
}

const getUrlReportTool = ai.defineTool(
    {
        name: 'getUrlReport',
        description: 'Retrieves a security analysis report for a given URL from VirusTotal.',
        inputSchema: z.object({ url: z.string() }),
        outputSchema: z.any(),
    },
    async ({ url }) => {
        return await getUrlAnalysis(url);
    }
);

const scanWebsitePrompt = ai.definePrompt({
  name: 'scanWebsitePrompt',
  input: {schema: ScanWebsiteInputSchema},
  output: {schema: ScanWebsiteOutputSchema},
  tools: [getUrlReportTool],
  system: `You are a security expert tasked with analyzing website vulnerability data. The user will provide a URL and optional data from other scans. Your job is to call the getUrlReport tool to fetch the raw JSON data for that URL from the VirusTotal API, and then interpret all available data to generate a comprehensive, human-readable report.

Based on the data, structure your report into the following sections. Provide a detailed, nicely formatted written output for each. If the data for a section is unavailable or indicates no issues, state that clearly. You **must** call the getUrlReport tool to get data before you generate the report.

**Overall Status:** Briefly summarize the findings from the 'attributes.stats' section of the VirusTotal report. Mention how many engines flagged the site as malicious, suspicious, or harmless.

**Detected Threats:** If any security vendors (e.g., in 'attributes.results' from VirusTotal) have flagged the URL, list them and the category of threat they identified (e.g., "malicious," "phishing").

**Transport Layer Security (TLS):** Use the provided SSL/TLS information from SSL Labs to analyze the website's encryption. Report the grade given by the scan. List the secure protocols (like TLS 1.2, TLS 1.3) that are supported. If the grade is poor (B, C, F, etc.), explain that this could expose user credentials during transmission. If there was an error in the SSL Labs scan, report that error. If no SSL/TLS data is provided, state that this aspect was not analyzed.

**HTTP Security Headers:** Use the provided Mozilla Observatory data to analyze the site's use of security headers. Report the grade and score. Explain what a good score means (e.g., the website is configured with excellent security headers like HSTS, CSP, X-Frame-Options, etc.). If the grade is poor, mention that this leaves the site vulnerable to attacks like clickjacking or cross-site scripting. If there was an error in the Mozilla scan, report that error. If no Mozilla Observatory data is provided, state that this aspect was not analyzed.

Provide a detailed report. If the VirusTotal report is empty or indicates no threats, your report should reflect that, stating that the scan found no obvious vulnerabilities.
`,
  prompt: `Please generate a security report for the following URL: {{{url}}}.
{{#if sslInfo}}
Here is the SSL/TLS analysis data:
Grade: {{sslInfo.grade}}
Protocols: {{#each sslInfo.protocols}}{{{this}}}{{#unless @last}}, {{/unless}}{{/each}}
{{#if sslInfo.error}}Error: {{sslInfo.error}}{{/if}}
{{/if}}
{{#if mozillaInfo}}
Here is the Mozilla Observatory analysis data:
Grade: {{mozillaInfo.grade}}
Score: {{mozillaInfo.score}}
{{#if mozillaInfo.error}}Error: {{mozillaInfo.error}}{{/if}}
{{/if}}
`,
});

const scanWebsiteFlow = ai.defineFlow(
  {
    name: 'scanWebsiteFlow',
    inputSchema: ScanWebsiteInputSchema,
    outputSchema: ScanWebsiteOutputSchema,
  },
  async input => {
    try {
        const {output} = await scanWebsitePrompt(input);
        if (!output) {
            throw new Error('No output was generated by the AI model.');
        }
        return output;
    } catch (e: any) {
        console.error("Error in scanWebsiteFlow, generating fallback report:", e.message || e);
        // If the tool call fails (e.g., bad API key), create a graceful fallback report.
        let vtError = "The VirusTotal scan could not be completed. The API may be unavailable or the key may be invalid.";
        const errorMessage = e.message || '';

        if (errorMessage.includes('UserNotActiveError') || errorMessage.includes('User is banned')) {
             vtError = "The VirusTotal scan failed because the API key is invalid or has been disabled.";
        } else if (errorMessage) {
            vtError = `The VirusTotal scan failed with an unexpected error: ${errorMessage}`;
        }
        
        const fallbackReport = `
**VirusTotal Scan:**
${vtError}

**Transport Layer Security (TLS):**
${input.sslInfo?.error ? `Scan failed: ${input.sslInfo.error}` : input.sslInfo?.grade ? `The scan returned a grade of **${input.sslInfo.grade}**. Supported protocols include: ${input.sslInfo.protocols?.join(', ') || 'N/A'}.` : 'This aspect was not analyzed.'}

**HTTP Security Headers:**
${input.mozillaInfo?.error ? `Scan failed: ${input.mozillaInfo.error}` : input.mozillaInfo?.grade ? `The scan returned a grade of **${input.mozillaInfo.grade}** with a score of **${input.mozillaInfo.score}**.` : 'This aspect was not analyzed.'}
`;
        return { scanReport: fallbackReport };
    }
  }
);
