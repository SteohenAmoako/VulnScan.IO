// Scans a website URL for vulnerabilities using the VirusTotal API through GenAI.
//
// - scanWebsite - A function that handles the website scanning process.
// - ScanWebsiteInput - The input type for the scanWebsite function.
// - ScanWebsiteOutput - The return type for the scanWebsite function.

'use server';

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const ScanWebsiteInputSchema = z.object({
  url: z.string().url().describe('The URL of the website to scan.'),
});
export type ScanWebsiteInput = z.infer<typeof ScanWebsiteInputSchema>;

const ScanWebsiteOutputSchema = z.object({
  scanReport: z.string().describe('A report of the scan results, including identified vulnerabilities, risk levels, and potential impacts.'),
});
export type ScanWebsiteOutput = z.infer<typeof ScanWebsiteOutputSchema>;

export async function scanWebsite(input: ScanWebsiteInput): Promise<ScanWebsiteOutput> {
  return scanWebsiteFlow(input);
}

const scanWebsitePrompt = ai.definePrompt({
  name: 'scanWebsitePrompt',
  input: {schema: ScanWebsiteInputSchema},
  output: {schema: ScanWebsiteOutputSchema},
  prompt: `You are a security expert tasked with scanning websites for vulnerabilities using the VirusTotal API. Analyze the provided URL and generate a comprehensive report of any identified vulnerabilities, risk levels, and potential impacts.

URL: {{{url}}}

Structure your report into the following sections. Provide a detailed, nicely formatted written output for each.

**Authentication Mechanisms:** Evaluate the strength of password storage (hashing algorithms used) and authentication processes (e.g., multi-factor authentication). Weak password storage or easily bypassable authentication could lead to unauthorized access.

**Session Management:** Analyze how user sessions are handled after login. Vulnerabilities in session management can enable session hijacking or fixation.

**Transport Layer Security (TLS):** Verify that the login page uses a valid TLS certificate and strong encryption protocols (e.g., TLS 1.3). This protects user credentials during transmission.

**Brute-Force Protection:** Assess whether the login page has measures to prevent brute-force attacks, such as account lockout policies or CAPTCHAs.

Provide a detailed report.
`,
});

const scanWebsiteFlow = ai.defineFlow(
  {
    name: 'scanWebsiteFlow',
    inputSchema: ScanWebsiteInputSchema,
    outputSchema: ScanWebsiteOutputSchema,
  },
  async input => {
    const {output} = await scanWebsitePrompt(input);
    return output!;
  }
);
